ingress:
  enabled: false
  hostname: "kafka-poc.ocp.cloudscale.puzzle.ch"

externalSecret:
  registry: false

mosquitto:
  global:
    nameOverride: "system-mosquitto"

kafka-cluster-setup:
  # Kafka UI configuration
  kafka-ui:
    cluster:
      name: mykafka-cluster         # Name of the Kafka cluster
      namespace: kafka              # Kubernetes namespace where the Kafka cluster is deployed
      kafkaPort: 9092               # Port used to connect to the Kafka broker

    deployment:
      replicas: 1                   # Number of Kafka UI replicas
      image: provectuslabs/kafka-ui # Docker image for Kafka UI
      tag: latest                   # Image tag
      imagePullPolicy: IfNotPresent # Kubernetes image pull policy
      imagePullSecrets:            # Optional: list of image pull secrets
        - name: registry-pull-secret
      containerPort: 8080          # Port exposed by the container

    service:
      enabled: true                # Whether to create a Kubernetes service
      type: "ClusterIP"            # Kubernetes service type
      port: 8080                   # Port exposed by the service

  # Kafka cluster configuration
  kafka-cluster:
    # Kafka cluster metadata and configuration
    cluster:
      name: mykafka-cluster
      version: 4.0.0
      metadataVersion: 4.0-IV3
      # Kafka listener types and ports
      listeners:
        - name: plain
          port: 9092
          type: internal
          tls: false
        - name: tls
          port: 9093
          type: internal
          tls: true
      # Key Kafka configuration options
      config:
        auto.create.topics.enable: false
        default.replication.factor: 1
        delete.topic.enable: true
        min.insync.replicas: 1
        offsets.topic.replication.factor: 1
        transaction.state.log.replication.factor: 1
        transaction.state.log.min.isr: 1

    # NodePool configuration (roles, storage, resources)
    nodePool:
      name: dual-role
      replicas: 1
      roles:
        - controller
        - broker
      volumes:
        - id: 0
          type: persistent-claim
          size: 5Gi
          deleteClaim: true
          kraftMetadata: shared
      resources:
        requests:
          memory: "2Gi"
          cpu: "500m"
        limits:
          memory: "4Gi"
          cpu: "1"

    # Example topic configuration (currently commented out)
    topics:
    #  - name: topic-test-data
    #    partitions: 2
    #    replicas: 2
    #    config:
    #      retention.ms: 604800000
    #      segment.bytes: 104857500
    #      cleanup.policy: delete


# Kafka showcase system configuration
solar-system:
  # Bridge between MQTT and Kafka
  mqtt-bridge:
    replicaCount: 1
    nameOverride: "solar-mqtt-bridge"  # Override the default name of the release
    kafkaBroker:
      name: mykafka-cluster
      namespace: kafka
      kafkaPort: 9092
      topic: topic-solar-data
    mqttBroker:
      name: system-mosquitto
      namespace: mosquitto
      mqttPort: 1883
      topic: solar/data
    image:
      repository: harbor.puzzle.ch/pitc-cicd-private/kafka-poc
      tag: latest
      pullPolicy: IfNotPresent
      imagePullSecrets: registry-pull-secret
    service:
      type: ClusterIP
      port: 5000
      targetPort: 5000
    env:
      # Kafka partition balancer mode:
      # "RoundRobin" - Distributes messages evenly across partitions
      # "LeastBytes" - Sends messages to the partition with the least load
      # "Hash" - Assigns partitions based on a hash of the message key
      KAFKA_BALANCER: "RoundRobin"

  # Kafka web consumer configuration
  kafka-web-consumer:
    nameOverride: solar-system
    replicaCount: 1
    kafkaBroker:
      name: mykafka-cluster
      namespace: kafka
      kafkaPort: 9092
      topic: topic-solar-data

    deployment:
      replicas: 1
      containerPort: 8080
      env:
        # The Kafka consumer group in which this consumer runs (e.g., "solar-consumer")
        KAFKA_CONSUMER_GROUP: "solar-consumer" 
        # Offset control:
        # "first" - Starts from the oldest available offset (reads all messages from the beginning)
        # "last" - Starts from the latest offset (only reads new messages from the start time)
        KAFKA_START_OFFSET: "first"
    image:
      image: harbor.puzzle.ch/pitc-cicd-private/kafka-poc
      tag: solar-kafka-web-consumer-latest
      imagePullPolicy: IfNotPresent
      imagePullSecrets: registry-pull-secret

    service:
      enabled: true
      type: "ClusterIP"
      port: 8080

  # Mqtt producer configuration
  mqtt-producer:
    nameOverride: "solar-mqtt-producer"  # Override the default name of the release
    replicaCount: 1
    image:
      repository: harbor.puzzle.ch/pitc-cicd-private/kafka-poc
      tag: solar-mqtt-producer-latest
      pullPolicy: IfNotPresent
      imagePullSecrets: registry-pull-secret

    mqttBroker:
      name: solar-system-mosquitto
      namespace: solar-system
      mqttPort: 1883
      topic: solar/data

    service:
      enabled: true
      type: ClusterIP
      port: 5001
      targetPort: 5001

    env:
      FETCH_INTERVAL: 10
