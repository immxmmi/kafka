apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nameOverride | default "system" }}-consumer-deployment
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.nameOverride | default "system" }}-consumer
  template:
    metadata:
      labels:
        app: {{ .Values.nameOverride | default "system" }}-consumer
    spec:
      {{- with $.Values.image.imagePullSecret }}
      imagePullSecrets:
        - name: {{ . }}
      {{- end }}
      containers:
        - name: {{ .Values.nameOverride | default "system" }}-consumer
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          env:
            {{- with .Values.deployment.env }}
            - name: KAFKA_BROKER
              value: "{{ $.Values.kafkaBroker.name }}-kafka-bootstrap.{{ $.Values.kafkaBroker.namespace }}.svc.cluster.local:{{ $.Values.kafkaBroker.kafkaPort }}"
            - name: KAFKA_TOPIC
              value: {{ $.Values.kafkaBroker.topic }}
            - name: KAFKA_CONSUMER_GROUP
              value: "{{ .KAFKA_CONSUMER_GROUP }}"
            - name: KAFKA_START_OFFSET
              value: "{{ .KAFKA_START_OFFSET }}"
            {{- end }}
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10

          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10